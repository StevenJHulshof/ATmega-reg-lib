
atmega48a-48pa-88a-88pa-168a-168pa-328-328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cf  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f1  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000256  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 92 00 	call	0x124	; 0x124 <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <IO_init>:
#include "io_ports.h"

/**************************************************************************************
 * FUNCTION
 *************************************************************************************/
void IO_init(io_initStructure_t *ioInitStructure) {
  80:	fc 01       	movw	r30, r24
	
	// Locate DDR register.
	register8_t *DDR = ioInitStructure->PORT-1;
  82:	32 81       	ldd	r19, Z+2	; 0x02
  84:	23 81       	ldd	r18, Z+3	; 0x03
		
	// Reset bit values.
	*DDR &= ~ioInitStructure->pin;
  86:	a3 2f       	mov	r26, r19
  88:	b2 2f       	mov	r27, r18
  8a:	9e 91       	ld	r25, -X
  8c:	80 81       	ld	r24, Z
  8e:	80 95       	com	r24
  90:	89 23       	and	r24, r25
  92:	8c 93       	st	X, r24
	*ioInitStructure->PORT &= ~ioInitStructure->pin;
  94:	a2 81       	ldd	r26, Z+2	; 0x02
  96:	b3 81       	ldd	r27, Z+3	; 0x03
  98:	9c 91       	ld	r25, X
  9a:	80 81       	ld	r24, Z
  9c:	80 95       	com	r24
  9e:	89 23       	and	r24, r25
  a0:	8c 93       	st	X, r24
		
	// Exit function on High Impedance.
	if(ioInitStructure->mode == IO_MODE_HI_Z)
  a2:	81 81       	ldd	r24, Z+1	; 0x01
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	b1 f0       	breq	.+44     	; 0xd4 <IO_init+0x54>
		return;
		
	// Set pin mode.
	*DDR |= ioInitStructure->pin * ioInitStructure->mode;
  a8:	a3 2f       	mov	r26, r19
  aa:	b2 2f       	mov	r27, r18
  ac:	9e 91       	ld	r25, -X
  ae:	20 81       	ld	r18, Z
  b0:	82 9f       	mul	r24, r18
  b2:	80 2d       	mov	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	89 2b       	or	r24, r25
  b8:	8c 93       	st	X, r24
	*ioInitStructure->PORT |=	ioInitStructure->pin * 
  ba:	a2 81       	ldd	r26, Z+2	; 0x02
  bc:	b3 81       	ldd	r27, Z+3	; 0x03
  be:	9c 91       	ld	r25, X
								((~ioInitStructure->mode) & 0x01);
  c0:	21 81       	ldd	r18, Z+1	; 0x01
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	20 fd       	sbrc	r18, 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
	if(ioInitStructure->mode == IO_MODE_HI_Z)
		return;
		
	// Set pin mode.
	*DDR |= ioInitStructure->pin * ioInitStructure->mode;
	*ioInitStructure->PORT |=	ioInitStructure->pin * 
  c8:	20 81       	ld	r18, Z
  ca:	82 9f       	mul	r24, r18
  cc:	80 2d       	mov	r24, r0
  ce:	11 24       	eor	r1, r1
  d0:	89 2b       	or	r24, r25
  d2:	8c 93       	st	X, r24
  d4:	08 95       	ret

000000d6 <TIM0_init>:
#include "tim_0_8_pwm.h"

/**************************************************************************************
 * FUNCTION
 *************************************************************************************/
void TIM0_init(tim0_initStructure_t *tim0InitStructure) {
  d6:	fc 01       	movw	r30, r24
	
	// Reset timer registers
	TCCR0A = 0x00;
  d8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
  da:	15 bc       	out	0x25, r1	; 37
		
	// Set compare output mode
	TCCR0A |= (tim0InitStructure->compareOutputModeA << COM0A0);
  dc:	24 b5       	in	r18, 0x24	; 36
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	30 e4       	ldi	r19, 0x40	; 64
  e2:	93 9f       	mul	r25, r19
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	82 2b       	or	r24, r18
  ea:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (tim0InitStructure->compareOutputModeB << COM0B0);
  ec:	24 b5       	in	r18, 0x24	; 36
  ee:	92 81       	ldd	r25, Z+2	; 0x02
  f0:	30 e1       	ldi	r19, 0x10	; 16
  f2:	93 9f       	mul	r25, r19
  f4:	c0 01       	movw	r24, r0
  f6:	11 24       	eor	r1, r1
  f8:	82 2b       	or	r24, r18
  fa:	84 bd       	out	0x24, r24	; 36
		
	// Set waveform generation mode
	TCCR0A |= (tim0InitStructure->waveformMode & 0x03);
  fc:	94 b5       	in	r25, 0x24	; 36
  fe:	80 81       	ld	r24, Z
 100:	83 70       	andi	r24, 0x03	; 3
 102:	89 2b       	or	r24, r25
 104:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= ((tim0InitStructure->waveformMode & 0x04) << 1);
 106:	95 b5       	in	r25, 0x25	; 37
 108:	80 81       	ld	r24, Z
 10a:	84 70       	andi	r24, 0x04	; 4
 10c:	88 0f       	add	r24, r24
 10e:	89 2b       	or	r24, r25
 110:	85 bd       	out	0x25, r24	; 37
		
	// Select clock mode
	TCCR0B |= tim0InitStructure->clockSelectMode;
 112:	95 b5       	in	r25, 0x25	; 37
 114:	83 81       	ldd	r24, Z+3	; 0x03
 116:	89 2b       	or	r24, r25
 118:	85 bd       	out	0x25, r24	; 37
		
	// Set output compare registers
	OCR0A = tim0InitStructure->outputCompareRegA;
 11a:	84 81       	ldd	r24, Z+4	; 0x04
 11c:	87 bd       	out	0x27, r24	; 39
	OCR0B = tim0InitStructure->outputCompareRegB;
 11e:	85 81       	ldd	r24, Z+5	; 0x05
 120:	88 bd       	out	0x28, r24	; 40
 122:	08 95       	ret

00000124 <main>:
 *************************************************************************************/

#include "lib/sys/io_ports.h"
#include "lib/sys/tim_0_8_pwm.h"

int main(void) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2a 97       	sbiw	r28, 0x0a	; 10
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61

	io_initStructure_t ioInitStructure = {
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8a 83       	std	Y+2, r24	; 0x02
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9c 83       	std	Y+4, r25	; 0x04
 146:	8b 83       	std	Y+3, r24	; 0x03
		.pin	= IO_PIN_3,
		.PORT	= &PORTC,
		.mode	= IO_MODE_OUTPUT
	}; IO_init(&ioInitStructure);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 40 00 	call	0x80	; 0x80 <IO_init>
	
	tim0_initStructure_t tim0InitStructure = {
 150:	ce 01       	movw	r24, r28
 152:	05 96       	adiw	r24, 0x05	; 5
 154:	26 e0       	ldi	r18, 0x06	; 6
 156:	fc 01       	movw	r30, r24
 158:	11 92       	st	Z+, r1
 15a:	2a 95       	dec	r18
 15c:	e9 f7       	brne	.-6      	; 0x158 <main+0x34>
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	2d 83       	std	Y+5, r18	; 0x05
 162:	2e 83       	std	Y+6, r18	; 0x06
 164:	25 e0       	ldi	r18, 0x05	; 5
 166:	28 87       	std	Y+8, r18	; 0x08
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	29 87       	std	Y+9, r18	; 0x09
		.clockSelectMode = TIM0_CS_CLK_DIV_1024,
		.compareOutputModeA = TIM0_CO_CLEAR_ON_COMPARE_MATCH,
		.waveformMode = TIM0_WF_CTC_OCR0A,
		.outputCompareRegA = 0xFF
	}; TIM0_init(&tim0InitStructure);
 16c:	0e 94 6b 00 	call	0xd6	; 0xd6 <TIM0_init>

    while(TRUE);
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x4c>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
