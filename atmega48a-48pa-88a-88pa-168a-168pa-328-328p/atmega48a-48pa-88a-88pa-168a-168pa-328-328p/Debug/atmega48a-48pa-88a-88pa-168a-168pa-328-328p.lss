
atmega48a-48pa-88a-88pa-168a-168pa-328-328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e8  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b4  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024b  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022f  00000000  00000000  00000fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <IO_init>:
#include "io_ports.h"

/**************************************************************************************
 * FUNCTION
 *************************************************************************************/
void IO_init(ioInitStructure_t *ioInitStructure) {
  80:	fc 01       	movw	r30, r24
	
	// Locate DDR register.
	ioRegister8_t *DDR = ioInitStructure->PORT-1;
  82:	32 81       	ldd	r19, Z+2	; 0x02
  84:	23 81       	ldd	r18, Z+3	; 0x03
		
	// Reset bit values.
	*DDR &= ~ioInitStructure->pin;
  86:	a3 2f       	mov	r26, r19
  88:	b2 2f       	mov	r27, r18
  8a:	9e 91       	ld	r25, -X
  8c:	80 81       	ld	r24, Z
  8e:	80 95       	com	r24
  90:	89 23       	and	r24, r25
  92:	8c 93       	st	X, r24
	*ioInitStructure->PORT &= ~ioInitStructure->pin;
  94:	a2 81       	ldd	r26, Z+2	; 0x02
  96:	b3 81       	ldd	r27, Z+3	; 0x03
  98:	9c 91       	ld	r25, X
  9a:	80 81       	ld	r24, Z
  9c:	80 95       	com	r24
  9e:	89 23       	and	r24, r25
  a0:	8c 93       	st	X, r24
		
	// Exit function on High Impedance.
	if(ioInitStructure->mode == IO_MODE_HI_Z)
  a2:	81 81       	ldd	r24, Z+1	; 0x01
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	a9 f0       	breq	.+42     	; 0xd2 <IO_init+0x52>
		return;
		
	// Set pin mode.
	*DDR |= ioInitStructure->pin * ioInitStructure->mode;
  a8:	a3 2f       	mov	r26, r19
  aa:	b2 2f       	mov	r27, r18
  ac:	9e 91       	ld	r25, -X
  ae:	20 81       	ld	r18, Z
  b0:	82 9f       	mul	r24, r18
  b2:	80 2d       	mov	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	89 2b       	or	r24, r25
  b8:	8c 93       	st	X, r24
	*ioInitStructure->PORT |=	ioInitStructure->pin * 
  ba:	a2 81       	ldd	r26, Z+2	; 0x02
  bc:	b3 81       	ldd	r27, Z+3	; 0x03
  be:	2c 91       	ld	r18, X
								((~ioInitStructure->mode) & 0x01);
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	90 95       	com	r25
  c4:	91 70       	andi	r25, 0x01	; 1
	if(ioInitStructure->mode == IO_MODE_HI_Z)
		return;
		
	// Set pin mode.
	*DDR |= ioInitStructure->pin * ioInitStructure->mode;
	*ioInitStructure->PORT |=	ioInitStructure->pin * 
  c6:	80 81       	ld	r24, Z
  c8:	98 9f       	mul	r25, r24
  ca:	80 2d       	mov	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	82 2b       	or	r24, r18
  d0:	8c 93       	st	X, r24
  d2:	08 95       	ret

000000d4 <IO_toggleBit>:
	
	// Locate PIN register.
	ioRegister8_t *PIN = PORT-2;
	
	// Toggle bit.
	*PIN |= pin;
  d4:	fc 01       	movw	r30, r24
  d6:	32 97       	sbiw	r30, 0x02	; 2
  d8:	80 81       	ld	r24, Z
  da:	68 2b       	or	r22, r24
  dc:	60 83       	st	Z, r22
  de:	08 95       	ret

000000e0 <main>:
#define F_CPU 16000000UL

#include <util/delay.h>
#include "lib/sys/io_ports.h"

int main(void) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <main+0x6>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <main+0x8>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62

	ioInitStructure_t ioInitStructure = {
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	8a 83       	std	Y+2, r24	; 0x02
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	9c 83       	std	Y+4, r25	; 0x04
  fa:	8b 83       	std	Y+3, r24	; 0x03
		.pin	= IO_PIN_3,
		.PORT	= &PORTC,
		.mode	= IO_MODE_OUTPUT
	}; IO_init(&ioInitStructure);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 40 00 	call	0x80	; 0x80 <IO_init>

    while(TRUE) {
		
		IO_toggleBit(&PORTC, IO_PIN_3);
 104:	68 e0       	ldi	r22, 0x08	; 8
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 6a 00 	call	0xd4	; 0xd4 <IO_toggleBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x34>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x3e>
 11e:	00 00       	nop
 120:	f1 cf       	rjmp	.-30     	; 0x104 <main+0x24>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
